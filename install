#!/usr/bin/env bash
# shellcheck disable=SC2162,SC2001

FPREFIX="=====>"
PREFIX="----->"
INDENT="      "

#SWARMLET_REPO="https://github.com/swarmlet/swarmlet.git"
SWARMLET_INSTALL_ROOT="/opt/swarmlet"
CA_PROD="https://acme-v02.api.letsencrypt.org/directory"
CA_TEST="https://acme-staging-v02.api.letsencrypt.org/directory"

# Check if user is root
if [[ $EUID -ne 0 ]]; then
  if [[ $(dpkg-query -s sudo) ]]; then
    echo "$PREFIX User is not root, using sudo"
    export SUDO="sudo"
  else
    echo "$PREFIX [ERROR] Please install sudo or run installer as root" && exit 1
  fi
fi

# Check if Bash is up to date
if [ "${BASH_VERSINFO:-0}" -lt 4 ]; then
  echo "$PREFIX [ERROR] Unmet requirements: Bash 4"
  echo "$INDENT Your Bash version is $BASH_VERSION"
  echo "$PREFIX Exiting with error code 1" 1>&2
  exit 1
fi

# Define default environment variables
ENV_CONFIRMED="true"
declare -A DEFAULT_OPTS=(
  [SWARMLET_REPO]="https://github.com/swarmlet/swarmlet.git"
  [INSTALLATION_TYPE]=interactive                  # (default interactive, options: interactive|noninteractive) Use CLI wizard to setup Swarmlet
  [INSTALL_BRANCH]=master                          # (default master) The default branch to install
  [SWARMLET_USERNAME]=$USER                        # (default $USER) Used for authentication with the registry and web services / dashboards
  [SWARMLET_PASSWORD]=swarmlet                     # (default swarmlet) Used for authentication with the registry and web services / dashboards
  [SSH_AUTHORIZED_KEYS]=$HOME/.ssh/authorized_keys # (default root) The authorized SSH keys for git deployments
  [NEW_HOSTNAME]=$HOSTNAME                         # (default $HOSTNAME) Optional: set a new hostname
  [ROOT_DOMAIN]=""                                 # (default undefined) The domain to use for deployment of included services
  [INSTALL_CEPH]=true                              # (default true) Install ceph for persistent storage
  [CREATE_SWAP]=false                              # (default false) Allocate 1GB of swap space
  [INSTALL_ZSH]=false                              # (default false) Install 'Oh My Zsh'
  [INSTALL_MODULES]=""                             # (default undefined, options: matomo|swarmpit|swarmprom|portainer) Seperate by space and wrap in quotes to install multiple modules
  [CA_SERVER]=$CA_PROD                             # (default prod, options: CA_PROD|CA_TEST
  # > TODO:
  # [DEBUG]=                       # (default undefined) Run installation in debug mode
)

# Set default environment variables
for KEY in "${!DEFAULT_OPTS[@]}"; do
  [[ -n "${DEFAULT_OPTS[$KEY]}" ]] && export "$KEY=${DEFAULT_OPTS[$KEY]}"
done

# Set environment variables from arguments if given
shopt -s extglob
while [[ "$#" -gt 0 ]]; do
  case "${1%=*}" in
  @($(echo "${!DEFAULT_OPTS[@]}" | sed 's/ /|/g')))
    export "${1?}"
    shift
    ;;
  *)
    echo "Unknown argument: $1"
    ENV_CONFIRMED="false"
    shift
    ;;
  esac
done

if [[ $ENV_CONFIRMED == "false" ]]; then
  echo "$PREFIX Current environment:"
  for KEY in "${!DEFAULT_OPTS[@]}"; do printenv | grep "$KEY"; done
  [[ $INSTALLLATION_TYPE == "noninteractive" ]] && echo "$PREFIX Exiting" && exit 1
  read -p "$PREFIX Press enter to continue with this configuration" </dev/tty
fi

# Define package managers
declare -A PKG_MANAGERS=(
  ["/etc/redhat-release"]=yum
  ["/etc/arch-release"]=pacman
  ["/etc/gentoo-release"]=emerge
  ["/etc/SuSE-release"]=zypp
  ["/etc/debian_version"]=apt-get
)

# Select correct package manager
for MANAGER in "${!PKG_MANAGERS[@]}"; do
  [[ -f $MANAGER ]] && PKG_MANAGER="${PKG_MANAGERS[$MANAGER]}"
done

set -eo pipefail
[[ $DEBUG ]] && set -x

install() {
  echo "$FPREFIX Installing Swarmlet"
  echo "$PREFIX Installing required packages"

  # TODO: support other package managers
  $SUDO "$PKG_MANAGER" update -y -qq &>/dev/null
  $SUDO "$PKG_MANAGER" install -y -qq apt-transport-https &>/dev/null
  [[ $(command -v git) ]] || $SUDO "$PKG_MANAGER" install -y -qq git

  echo "$PREFIX Cloning $SWARMLET_REPO"
  if [[ -d $SWARMLET_INSTALL_ROOT && $(command -v swarmlet) ]]; then
    echo "$PREFIX Swarmlet is already installed, updating"
    # TODO:
    # pushd $SWARMLET_INSTALL_ROOT >/dev/null
    # git pull origin "$INSTALL_BRANCH"
    # popd >/dev/null
    # swarmlet update
  else
    git clone -q $SWARMLET_REPO $SWARMLET_INSTALL_ROOT
  fi

  if [[ "$INSTALL_BRANCH" != "master" ]]; then
    echo "$PREFIX Checking out $INSTALL_BRANCH"
    pushd $SWARMLET_INSTALL_ROOT >/dev/null
    git checkout "$INSTALL_BRANCH"
    popd >/dev/null
  fi

  echo "$PREFIX Linking executable"
  [[ $(command -v swarmlet) ]] || ln -s $SWARMLET_INSTALL_ROOT/swarmlet /usr/local/sbin/

  echo "$PREFIX Initializing Swarmlet"
  swarmlet init

  echo "$FPREFIX Server initialized as manager node"
  swarmlet node ls

  echo "$FPREFIX Swarmlet modules deployed"
  swarmlet stack ls

  echo "$FPREFIX Installation complete"
  echo "$PREFIX Check the docs on how to configure a domain name for Swarmlet services"
  echo "$INDENT https://swarmlet.dev/docs/getting-started/introduction"
  echo "$PREFIX Please wait a minute or two for Traefik to initialize..."
  echo "$PREFIX Follow the logs using:"
  echo "$INDENT $ docker service logs router_traefik -f"
  echo "$PREFIX Check status of services using:"
  echo "$INDENT $ docker service ls"
}

install "$@"
