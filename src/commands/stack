#!/usr/bin/env bash

set -eo pipefail
[[ $DEBUG ]] && set -x

stack() {
  declare cmd="stack"
  [[ "$1" == "$cmd" ]] && shift 1

  stack-"$@"
}

stack-build() {
  declare cmd="build"
  [[ "$1" == "$cmd" ]] && shift 1

  STACK_NAME="$1"
  STACK_ROOT="${2:-$USER_ROOT}/$STACK_NAME"
  SWARMLET_REGISTRY_USERNAME="${3:-$SWARMLET_USERNAME}"
  SWARMLET_REGISTRY_PASSWORD="${4:-$SWARMLET_PASSWORD}"

  if [ "$(ls -A "$STACK_ROOT")" ]; then
    pushd "$STACK_ROOT" >/dev/null

    while ! is-service-healthy registry; do sleep 1; done

    echo "$SWARMLET_REGISTRY_PASSWORD" | docker login --password-stdin \
      -u "$SWARMLET_REGISTRY_USERNAME" \
      "$SWARMLET_REGISTRY"

    echo "$PREFIX Building stack $STACK_NAME"
    docker-compose build --parallel

    echo "$PREFIX Pushing $STACK_NAME to swarm registry"
    docker-compose push

    popd >/dev/null
  fi
}

stack-deploy() {
  declare cmd="deploy"
  [[ "$1" == "$cmd" ]] && shift 1

  STACK_NAME="$1"
  STACK_ROOT="${2:-$USER_ROOT}/$STACK_NAME"
  COMPOSE_FILE="$STACK_ROOT/docker-compose.yml"

  pushd "$STACK_ROOT" >/dev/null

  echo "$PREFIX Deploying $STACK_NAME"
  echo "$PREFIX Base path $BASE_VOL_PATH"

  if [[ $STACK_NAME == "deployer" ]]; then
    docker stack deploy --with-registry-auth --compose-file "$COMPOSE_FILE" "$STACK_NAME"
  else
    docker stack deploy --compose-file "$COMPOSE_FILE" "$STACK_NAME"
  fi

  popd >/dev/null
}

stack-ls() {
  declare cmd="ls"
  [[ "$1" == "$cmd" ]] && shift 1

  echo "$PREFIX Listing stacks"
  docker stack ls
}

stack-start() {
  declare cmd="start"
  [[ "$1" == "$cmd" ]] && shift 1

  STACK_NAME="$1"
  STACK_ROOT="${2:-$USER_ROOT}/$STACK_NAME"

  pushd "$STACK_ROOT" >/dev/null

  echo "$PREFIX Starting stack $STACK_NAME"

  docker-compose up -d

  popd >/dev/null
}

stack-stop() {
  declare cmd="stop"
  [[ "$1" == "$cmd" ]] && shift 1

  STACK_NAME="$1"
  STACK_ROOT="${2:-$USER_ROOT}/$STACK_NAME"

  pushd "$STACK_ROOT" >/dev/null

  echo "$PREFIX Stopping stack"
  docker-compose down

  popd >/dev/null
}

stack-remove() {
  declare cmd="remove"
  [[ "$1" == "$cmd" ]] && shift 1

  STACK_NAME="$1"
  STACK_ROOT="${2:-$USER_ROOT}/$STACK_NAME"

  docker stack rm "$STACK_NAME"
  rm -rf "$STACK_ROOT" "$GIT_REPO_ROOT/$STACK_NAME.git" >/dev/null
  # TODO: clean up some more
}

"$@"
