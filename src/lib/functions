#!/usr/bin/env bash
# shellcheck disable=SC2091,SC2068,SC1083

# Define package managers
declare -A PKG_MANAGERS=(
  ["/etc/redhat-release"]=yum
  ["/etc/arch-release"]=pacman
  ["/etc/gentoo-release"]=emerge
  ["/etc/SuSE-release"]=zypp
  ["/etc/debian_version"]=apt-get
)

# Select correct package manager
for MANAGER in "${!PKG_MANAGERS[@]}"; do
  [[ -f $MANAGER ]] && PKG_MANAGER="${PKG_MANAGERS[$MANAGER]}"
done

# Utility functions
ensure-root() {
  if [[ $EUID -ne 0 ]]; then
    if [[ $(dpkg-query -s sudo) ]]; then
      echo "$PREFIX User is not root, using sudo"
      export SUDO="sudo"
    else
      echo "$PREFIX [ERROR] Please install sudo or run as root" && exit 1
    fi
  fi
}

check-bash-version() {
  if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
    echo "$PREFIX [ERROR] Unmet requirements: Bash 4"
    echo "$INDENT Your Bash version is $BASH_VERSION"
    echo "$PREFIX Exiting with error code 1" 1>&2
    exit 1
  fi
}

check-swarmlet-version() {
  pushd "$SWARMLET_ROOT" >/dev/null || exit
  git describe --match "v*" "$INSTALL_BRANCH"
  popd >/dev/null || exit
}

update-package-cache() {
  PKG_CACHE="/var/lib/apt/lists/"
  UPDATE_PKG_CACHE="$PKG_MANAGER update"
  TIMESTAMP=$(stat -c %Y $PKG_CACHE)
  TIMESTAMP_AS_DATE=$(date -d @"$TIMESTAMP" "+%b %e")
  TODAY=$(date "+%b %e")

  if [ ! "$TODAY" == "$TIMESTAMP_AS_DATE" ]; then
    echo "$PREFIX $PKG_MANAGER update has not been run today, updating"
    $SUDO "$UPDATE_PKG_CACHE" &>/dev/null
  fi
}

notify-package-updates-available() {
  echo "$PREFIX Checking $PKG_MANAGER for upgraded packages"
  PKG_COUNT="$PKG_MANAGER -s -o Debug::NoLocking=true upgrade | grep -c ^Inst || true"
  UPDATES_TO_INSTALL=$(eval "$PKG_COUNT")
  if [[ $UPDATES_TO_INSTALL -eq 0 ]]; then
    echo "$PREFIX System up to date, continuing installation"
  else
    echo "$PREFIX There are $UPDATES_TO_INSTALL updates available"
    # TODO: explain why and how to update
    # echo "$PREFIX Please update your packages"
  fi
}

pkg-check-and-install() {
  PKG_INSTALL="$PKG_MANAGER --yes --no-install-recommends install"
  dpkg-query -W -f='${Status}' "$1" 2>/dev/null | grep -c "$1 installed" || $SUDO "$PKG_INSTALL" "$1"
}

install-dependencies() {
  echo "$PREFIX Installing dependencies"
  PKG_INSTALL="$PKG_MANAGER --yes --no-install-recommends install"
  echo "${SWARMLET_DEPENDENCIES[@]}" $PKG_MANAGER
  # SWARMLET_DEPENDENCIES2="$1"

  echo iptables-persistent iptables-persistent/autosave_v4 boolean true | $SUDO debconf-set-selections
  echo iptables-persistent iptables-persistent/autosave_v6 boolean false | $SUDO debconf-set-selections

  for PKG in "${SWARMLET_DEPENDENCIES[@]}"; do
    echo "$PREFIX Checking and installing $PKG"
    $SUDO pkg-check-and-install "$PKG"
  done
}

set-hostname() {
  echo "$PREFIX Setting hostname"
  NEW_HOSTNAME="$1"
  ROOT_DOMAIN="$2"

  if command -v hostnamectl &>/dev/null; then # Prefer hostnamectl, no restart required
    $SUDO hostnamectl set-hostname "$NEW_HOSTNAME"
  # Fall back on manual hostname configuration, restart required
  else
    $SUDO echo "$NEW_HOSTNAME" >/etc/hostname
  fi

  $SUDO sed -i "s/127.0.1.1.*$NEW_HOSTNAME/127.0.1.1\t$ROOT_DOMAIN/g" /etc/hosts
}

create-git-user() {
  $SUDO adduser "$GIT_USER" --disabled-password --gecos --quiet
  $SUDO usermod -aG docker "$GIT_USER"
  mkdir -p "$GIT_REPO_ROOT" "$GIT_USER_ROOT"/.ssh
  $SUDO setfacl -m u:"$GIT_USER":rwx "$GIT_REPO_ROOT"
}

add-ssh-authorized-keys() {
  SSH_AUTHORIZED_KEYS="$1"
  $SUDO cat "$SSH_AUTHORIZED_KEYS" | ts "$SSH_OPTIONS" >>"$GIT_USER_ROOT"/.ssh/authorized_keys
  $SUDO chmod 700 "$GIT_USER_ROOT"/.ssh
  $SUDO chmod 600 "$GIT_USER_ROOT"/.ssh/authorized_keys
  $SUDO chown -R "$GIT_USER:$GIT_USER" "$GIT_USER_ROOT"/.ssh
}

install-docker() {
  echo "$PREFIX Installing Docker and Docker Compose"
  wget -nv -O - https://get.docker.com/ | sh &>/dev/null
  curl -fsSL "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  chmod +x /usr/local/bin/docker-compose
  $SUDO usermod -aG docker $USER
}

install-zsh() {
  echo "$PREFIX Installing 'Oh My Zsh'"
  $SUDO apt-get install -y -qq zsh &>/dev/null
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended &>/dev/null
  chsh -s "$(which zsh)"
}

install-cephadm() {
  echo "$PREFIX Installing cephadm"
  curl -fsSL "https://github.com/ceph/ceph/raw/octopus/src/cephadm/cephadm-$(uname -s)-$(uname -m)" -o /usr/local/bin/cephadm
  chmod +x /usr/local/bin/cephadm
}

abort-installation() {
  echo "$PREFIX Aborting installation"
  exit 1
}

check-docker() {
  if $(systemctl show --property ActiveState docker | grep -q "ActiveState=active"); then
    echo "Docker is running"
    docker --version
  else
    echo "Docker is not running, exiting"
    exit 1
  fi
}

git-set-config() {
  DOMAIN=${1:-"$HOSTNAME.local"}
  git config user.email "$GIT_USER@$DOMAIN"
  git config user.name "$GIT_USER"
}

git-local-push() {
  REPO_SRC=$1
  REPO_NAME=$(basename "$REPO_SRC")
  pushd "$REPO_SRC" >/dev/null || exit
  git init
  git-set-config "$ROOT_DOMAIN"
  git add .
  git commit -m "initial"
  git push "$GIT_REPO_ROOT/$REPO_NAME.git" master
  chown -R "$GIT_USER:$GIT_USER" "$GIT_USER_ROOT/$REPO_NAME"
  popd >/dev/null || exit
}

create-swap() {
  SIZE=${1:-1G}
  FILE_PATH=${2:-/swapfile}
  $SUDO fallocate -l "$SIZE" "$FILE_PATH"
  $SUDO chmod 600 "$FILE_PATH"
  $SUDO mkswap "$FILE_PATH"
  $SUDO swapon "$FILE_PATH"
  echo "$FILE_PATH none swap sw 0 0" | $SUDO tee -a /etc/fstab
}

uninstall-swarmlet() {
  if [[ -d "$GIT_USER_ROOT" ]]; then
    $SUDO rm -rf /home/git
    $SUDO userdel git -f
  fi
  [[ -f /usr/local/sbin/swarmlet ]] && unlink /usr/local/sbin/swarmlet
  if [[ -d "$GIT_REPO_ROOT" ]]; then $SUDO rm -rf "$GIT_REPO_ROOT"; fi
  if [[ -d "$SWARMLET_ROOT" ]]; then $SUDO rm -rf "$SWARMLET_ROOT"; fi
}

reinstall-swarmlet() {
  uninstall-swarmlet
  curl -fsSL https://get.swarmlet.dev | bash -s "$@"
}

check-existing() {
  if [[ -d "$GIT_USER_ROOT" ]] ||
    [[ -d "$GIT_REPO_ROOT" ]] ||
    [[ -f /usr/local/sbin/swarmlet ]] ||
    [[ -d $SWARMLET_ROOT ]]; then
    return 0
  else
    return 1
  fi
}

check-swarm() {
  if [[ "$(docker info 2>/dev/null | grep Swarm | sed 's/Swarm: //g')" == " active" ]]; then
    return 1
  else
    return 0
  fi
}

is-service-healthy() {
  SERVICE="$1"
  REPLICAS=$(docker stack services "$SERVICE" --format={{.Replicas}})

  if [[ $(echo "$REPLICAS" | sed 's/\/[0-9]//') -gt 0 ]]; then
    return 0
  else
    return 1
  fi
}

list-internal-functions() {
  typeset -f | awk '/ \(\) $/ && !/^list-internal-functions / {print $1}'
}

get-random-open-port() {
  comm -23 \
    <(seq 49152 65535 | sort) \
    <(ss -Htan | awk '{print $4}' | cut -d':' -f2 | sort -u) |
    shuf |
    head -n 1
}

nuke() {
  uninstall-swarmlet
  for CONFIG in $(docker config ls --format {{.ID}}); do
    echo docker config rm "$CONFIG"
  done
  for SECRET in $(docker secret ls --format {{.ID}}); do
    echo docker config rm "$SECRET"
  done
  for NETWORK in $(docker network ls --format {{.Name}}); do
    echo docker config rm "$NETWORK"
  done
  $SUDO apt-get remove -y --purge docker docker-compose
  $SUDO apt autoremove -y
}

# setup-ssh() {
#   if [[ ! -d ~/.ssh ]]; then
#     mkdir -p ~/.ssh/
#   fi

#   if [[ ! -f ~/.ssh/id_rsa.pub ]]; then
#     ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
#     echo "$INDENT Execute ssh-keygen --[done]"
#   fi

#   if [[ ! -f ~/.ssh/authorized_keys ]]; then
#     touch ~/.ssh/authorized_keys
#     echo "$INDENT Create ~/.ssh/authorized_keys --[done]"
#     chmod 700 ~/.ssh/authorized_keys
#     cat ~/.ssh/id_rsa.pub >>~/.ssh/authorized_keys
#     echo "$INDENT Append the public keys id_rsa into authorized keys --[done]"
#     chmod 400 ~/.ssh/authorized_keys
#     chmod 700 ~/.ssh/
#   fi
# }
